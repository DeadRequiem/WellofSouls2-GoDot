extends Node

# QUEST Interpreter Singleton
class_name QuestInterpreter

var scene_data = {}  # Stores parsed script data
var game_state = { "tokens": {}, "variables": {}, "inventory": {}, "gold": 0 }
var current_scene = ""
var active_actors = {}
var debug_mode = true

func _ready():
	print("QUEST Interpreter Initialized")

# Load a scene
func load_scene(scene_id):
	if scene_id in scene_data:
		current_scene = scene_id
		execute_scene()
	else:
		print("Scene not found: " + str(scene_id))

# Execute the current scene
func execute_scene():
	var scene = scene_data.get(current_scene, [])
	for command in scene:
		execute_command(command)

# Execute a single command
func execute_command(command):
	var parts = command.split(" ", true, 1)
	var cmd = parts[0]
	var args = parts[1] if parts.size() > 1 else ""
	
	match cmd:
		"SCENE": process_scene(args)
		"IF": process_if(args)
		"IF=": process_if_equal(args)
		"IF>": process_if_greater(args)
		"IF<": process_if_less(args)
		"IF<=": process_if_less_equal(args)
		"IF>=": process_if_greater_equal(args)
		"IF<>": process_if_not_equal(args)
		"IF!=": process_if_not_equal(args)
		"IFEVEN": process_if_even(args)
		"IFODD": process_if_odd(args)
		"GOTO": process_goto(args)
		"GOTO EXIT": process_goto_exit()
		"GOTO LINK": process_goto_link(args)
		"GOTO SCENE": process_goto_scene(args)
		"CALL": process_call(args)
		"RETURN": process_return(args)
		"ACTOR": process_actor(args)
		"BKGND": process_background(args)
		"GIVE": process_give(args)
		"TAKE": process_take(args)
		"FIGHT": process_fight(args)
		"FIGHT2": process_fight2(args)
		"ASK": process_ask(args)
		"TOKEN": process_token(args)
		"MUSIC": process_music(args)
		"SOUND": process_sound(args)
		"WAIT": process_wait(args)
		"DIALOG": process_dialog(args)
		"POSE": process_pose(args)
		"MOVE": process_move(args)
		"FX": process_fx(args)
		"WEATHER": process_weather(args)
		"INVENTORY": process_inventory(args)
		"MAP": process_map(args)
		"SPELL": process_spell(args)
		"ITEM": process_item(args)
		"TROPHY": process_trophy(args)
		"MONSTER": process_monster(args)
		"OFFER": process_offer(args)
		"OFFER2": process_offer2(args)
		"FLAGS": process_flags(args)
		"SEL": process_sel(args)
		"LOCK": process_lock(args)
		"FACE": process_face(args)
		"COLOR": process_color(args)
		"COUNTDOWN": process_countdown(args)
		"GAME": process_game(args)
		"HOST_GIVE": process_host_give(args)
		"HOST_TAKE": process_host_take(args)
		"MISSIONS": process_missions(args)
		"MENU": process_menu(args)
		"MODULO": process_mod(args)
		"PARTY": process_party(args)
		"PARTY_GIVE": process_party_give(args)
		"PARTY_TAKE": process_party_take(args)
		"POP": process_pop(args)
		"PUSH": process_push(args)
		"SHUFFLE": process_shuffle(args)
		"STRCMP": process_strcmp(args)
		"STRSTR": process_strstr(args)
		"TIMER": process_timer(args)
		"THEME": process_theme(args)
		"HTML": process_html(args)
		"GET_SERVER_VAR": process_get_server_var(args)
		"SET_SERVER_VAR": process_set_server_var(args)
		"SET_LEN": process_set_len(args)
		"SET_SUBSTR": process_set_substr(args)
		"EJECT": process_eject(args)
		"ADD": process_add(args)
		"SUB": process_sub(args)
		"MUL": process_mul(args)
		"DIV": process_div(args)
		"MOD": process_mod(args)
		"F_ADD": process_f_add(args)
		"F_SUB": process_f_sub(args)
		"F_MUL": process_f_mul(args)
		"F_DIV": process_f_div(args)
		"F_MOD": process_f_mod(args)
		"END": process_end(args)
		_:
			debug_print("Unknown command: " + cmd)

# Debugging function
func debug_print(message: String) -> void:
	if debug_mode:
		print("[DEBUG]: " + message)

# Placeholder functions
func process_if(args): debug_print("IF: " + args)
func process_if_equal(args): debug_print("IF=: " + args)
func process_if_greater(args): debug_print("IF>: " + args)
func process_if_less(args): debug_print("IF<: " + args)
func process_if_less_equal(args): debug_print("IF<=: " + args)
func process_if_greater_equal(args): debug_print("IF>=: " + args)
func process_if_not_equal(args): debug_print("IF<>: " + args)
func process_if_even(args): debug_print("IFEVEN: " + args)
func process_if_odd(args): debug_print("IFODD: " + args)
func process_goto_exit(): debug_print("GOTO EXIT")
func process_goto_link(args): debug_print("GOTO LINK: " + args)
func process_goto_scene(args): debug_print("GOTO SCENE: " + args)
func process_call(args): debug_print("CALL: " + args)
func process_return(args): debug_print("RETURN: " + args)
func process_offer2(args): debug_print("OFFER2: " + args)
func process_face(args): debug_print("FACE: " + args)
func process_color(args): debug_print("COLOR: " + args)
func process_countdown(args): debug_print("COUNTDOWN: " + args)
func process_game(args): debug_print("GAME: " + args)
func process_host_give(args): debug_print("HOST_GIVE: " + args)
func process_host_take(args): debug_print("HOST_TAKE: " + args)
func process_add(args): debug_print("ADD: " + args)
func process_sub(args): debug_print("SUB: " + args)
func process_mul(args): debug_print("MUL: " + args)
func process_div(args): debug_print("DIV: " + args)
func process_mod(args): debug_print("MOD: " + args)
func process_f_add(args): debug_print("F_ADD: " + args)
func process_f_sub(args): debug_print("F_SUB: " + args)
func process_f_mul(args): debug_print("F_MUL: " + args)
func process_f_div(args): debug_print("F_DIV: " + args)
func process_f_mod(args): debug_print("F_MOD: " + args)
func process_end(args): debug_print("END: " + args)
func process_scene(args): debug_print("SCENE: " + args)
func process_goto(args): debug_print("GOTO: " + args)
func process_actor(args): debug_print("ACTOR: " + args)
func process_background(args): debug_print("BKGND: " + args)
func process_give(args): debug_print("GIVE: " + args)
func process_take(args): debug_print("TAKE: " + args)
func process_fight(args): debug_print("FIGHT: " + args)
func process_fight2(args): debug_print("FIGHT2: " + args)
func process_ask(args): debug_print("ASK: " + args)
func process_token(args): debug_print("TOKEN: " + args)
func process_music(args): debug_print("MUSIC: " + args)
func process_sound(args): debug_print("SOUND: " + args)
func process_wait(args): debug_print("WAIT: " + args)
func process_dialog(args): debug_print("DIALOG: " + args)
func process_pose(args): debug_print("POSE: " + args)
func process_move(args): debug_print("MOVE: " + args)
func process_fx(args): debug_print("FX: " + args)
func process_weather(args): debug_print("WEATHER: " + args)
func process_inventory(args): debug_print("INVENTORY: " + args)
func process_map(args): debug_print("MAP: " + args)
func process_spell(args): debug_print("SPELL: " + args)
func process_item(args): debug_print("ITEM: " + args)
func process_trophy(args): debug_print("TROPHY: " + args)
func process_monster(args): debug_print("MONSTER: " + args)
func process_offer(args): debug_print("OFFER: " + args)
func process_flags(args): debug_print("FLAGS: " + args)
func process_sel(args): debug_print("SEL: " + args)
func process_lock(args): debug_print("LOCK: " + args)
func process_missions(args): debug_print("MISSIONS: " + args)
func process_menu(args): debug_print("MENU: " + args)
func process_party(args): debug_print("PARTY: " + args)
func process_party_give(args): debug_print("PARTY_GIVE: " + args)
func process_party_take(args): debug_print("PARTY_TAKE: " + args)
func process_pop(args): debug_print("POP: " + args)
func process_push(args): debug_print("PUSH: " + args)
func process_shuffle(args): debug_print("SHUFFLE: " + args)
func process_strcmp(args): debug_print("STRCMP: " + args)
func process_strstr(args): debug_print("STRSTR: " + args)
func process_timer(args): debug_print("TIMER: " + args)
func process_theme(args): debug_print("THEME: " + args)
func process_html(args): debug_print("HTML: " + args)
func process_get_server_var(args): debug_print("GET_SERVER_VAR: " + args)
func process_set_server_var(args): debug_print("SET_SERVER_VAR: " + args)
func process_set_len(args): debug_print("SET_LEN: " + args)
func process_set_substr(args): debug_print("SET_SUBSTR: " + args)
func process_eject(args): debug_print("EJECT: " + args)
